<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="6ef26af4-f06a-46f6-a81f-79cadc0acd50" name="Changes" comment="Solve two-sum-ii-input-array-is-sorted problem&#10;&#10;approach: an efficient way to make two pointers&#10;and loop with two pointers if target grater than &#10;sum of two pointers then move left pointer by one&#10;and vice versa till we find the result.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/Solution.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Solution.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2Jamr9tfmgeUm4gb51bxpkmY3Pz" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;last_opened_file_path&quot;: &quot;F:/Projects/spring-boot-voting&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RunManager" selected="Application.Main">
    <configuration name="Impl" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Impl" />
      <module name="LeetCodeProblems" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Main" />
      <module name="LeetCodeProblems" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.Main" />
        <item itemvalue="Application.Impl" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="6ef26af4-f06a-46f6-a81f-79cadc0acd50" name="Changes" comment="" />
      <created>1672324765434</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1672324765434</updated>
      <workItem from="1672324766504" duration="1030000" />
      <workItem from="1672350541472" duration="5634000" />
      <workItem from="1672391392732" duration="12217000" />
      <workItem from="1672483902300" duration="4898000" />
      <workItem from="1672863221115" duration="2325000" />
      <workItem from="1672916666003" duration="31138000" />
      <workItem from="1672997807581" duration="326000" />
      <workItem from="1673002643007" duration="2390000" />
      <workItem from="1673100457881" duration="2043000" />
      <workItem from="1673115710575" duration="10968000" />
      <workItem from="1673565394646" duration="1931000" />
      <workItem from="1673619206361" duration="8467000" />
      <workItem from="1674319161119" duration="1217000" />
      <workItem from="1675428366030" duration="1554000" />
      <workItem from="1675432013032" duration="563000" />
      <workItem from="1675432839142" duration="606000" />
      <workItem from="1675453033733" duration="4181000" />
      <workItem from="1675941953097" duration="4471000" />
      <workItem from="1676500439729" duration="1411000" />
      <workItem from="1678056028334" duration="6365000" />
      <workItem from="1678103774482" duration="1676000" />
      <workItem from="1678271769088" duration="4696000" />
      <workItem from="1678452344822" duration="4511000" />
      <workItem from="1678576802123" duration="119000" />
    </task>
    <task id="LOCAL-00001" summary="Add a repo of solving leet code problems (PS)&#10;&#10;Solve containsDuplicate problem&#10;use set to store key values when &#10;triggering duplicate number over &#10;the true duplicate flag and return true">
      <created>1672352483675</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1672352483675</updated>
    </task>
    <task id="LOCAL-00002" summary="_">
      <created>1672353228420</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1672353228420</updated>
    </task>
    <task id="LOCAL-00003" summary="Solve two-sum problem&#10;&#10;Solved by two ways&#10;1- brute force through making two loops&#10;2- by hash map by storing index of each element&#10;and check complement occurrence">
      <created>1672404191679</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1672404191679</updated>
    </task>
    <task id="LOCAL-00004" summary="Solve Group Anagrams problem&#10;&#10;approach: store key sorted string with his&#10;list of Anagrams in hashmap">
      <created>1672415696172</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1672415696172</updated>
    </task>
    <task id="LOCAL-00005" summary="Solve top-k-frequent-elements problem&#10;&#10;approach: store value of counts of key in&#10;hashmap then sort the list to get most (k) frequencies">
      <created>1672488356682</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1672488356682</updated>
    </task>
    <task id="LOCAL-00006" summary="Solve Product of Array Except Self problem&#10;&#10;approach: calculate each index product by making &#10;two pointers one to get the product of prefix&#10;and then store his value temporary in the res[]&#10;and the other of postfix which get the product&#10;of array from other side then store it in the res[]&#10;by multiplying the prefix in stored res[]">
      <created>1672927887199</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1672927887199</updated>
    </task>
    <task id="LOCAL-00007" summary="Solve Valid Sudoku problem&#10;&#10;approach: store row, columns and square chars in sets &#10;and checks on duplicates if found return false else return true&#10;looping through row and columns is pretty easy&#10;tricky part on looping through squares , I followed&#10;approach of looping through columns and changing row &#10;so each j count reach to 9 i checked 3 squares&#10;then repeat the step to other 6 squares by looping&#10;through i twice (loop when i mod 3 equal 0)">
      <created>1673005013843</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1673005013843</updated>
    </task>
    <task id="LOCAL-00008" summary="Solve longest-consecutive-sequence problem&#10;&#10;approach: sort the array then find maxConsecutive&#10;and save max to the longest till finding max grater&#10;than longest, then store it.">
      <created>1673119413951</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1673119413951</updated>
    </task>
    <task id="LOCAL-00009" summary="Solve valid-palindrome problem&#10;&#10;approach: of efficient way to make two pointers&#10;and loop on numeric chars and digits only till they&#10;met, then handle side cases if we faced a non-numeric&#10;value then if we looped by the pointer and reached to &#10;the end of string, that's mean this should be a valid&#10;cuz it will be like an array with one char, which be&#10;valid either a numeric or else.">
      <created>1673126700469</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1673126700469</updated>
    </task>
    <task id="LOCAL-00010" summary="Solve two-sum-ii-input-array-is-sorted problem&#10;&#10;approach: an efficient way to make two pointers&#10;and loop with two pointers if target grater than &#10;sum of two pointers then move left pointer by one&#10;and vice versa till we find the result.">
      <created>1675432391578</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1675432391578</updated>
    </task>
    <option name="localTasksCounter" value="11" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Add a repo of solving leet code problems (PS)&#10;&#10;Solve containsDuplicate problem&#10;use set to store key values when &#10;triggering duplicate number over &#10;the true duplicate flag and return true" />
    <MESSAGE value="_" />
    <MESSAGE value="Solve valid anagram problem&#10;&#10;convert each string to char array&#10;and sort them then compare equality" />
    <MESSAGE value="Solve two-sum problem&#10;&#10;Solved by two ways&#10;1- brute force through making two loops&#10;2- by hash map by storing index of each element&#10;and check complement occurrence" />
    <MESSAGE value="Solve Group Anagrams problem&#10;&#10;approach: store key sorted string with his&#10;list of Anagrams in hashmap" />
    <MESSAGE value="Solve top-k-frequent-elements problem&#10;&#10;approach: store value of counts of key in&#10;hashmap then sort the list to get most (k) frequencies" />
    <MESSAGE value="Solve Product of Array Except Self problem&#10;&#10;approach: calculate each index product by making &#10;two pointers one to get the product of prefix&#10;and then store his value temporary in the res[]&#10;and the other of postfix which get the product&#10;of array from other side then store it in the res[]&#10;by multiplying the prefix in stored res[]" />
    <MESSAGE value="Solve Valid Sudoku problem&#10;&#10;approach: store row, columns and square chars in sets &#10;and checks on duplicates if found return false else return true&#10;looping through row and columns is pretty easy&#10;tricky part on looping through squares , I followed&#10;approach of looping through columns and changing row &#10;so each j count reach to 9 i checked 3 squares&#10;then repeat the step to other 6 squares by looping&#10;through i twice (loop when i mod 3 equal 0)" />
    <MESSAGE value="Solve longest-consecutive-sequence problem&#10;&#10;approach: sort the array then find maxConsecutive&#10;and save max to the longest till finding max grater&#10;than longest, then store it." />
    <MESSAGE value="Solve valid-palindrome problem&#10;&#10;approach: of efficient way to make two pointers&#10;and loop on numeric chars and digits only till they&#10;met, then handle side cases if we faced a non-numeric&#10;value then if we looped by the pointer and reached to &#10;the end of string, that's mean this should be a valid&#10;cuz it will be like an array with one char, which be&#10;valid either a numeric or else." />
    <MESSAGE value="Solve two-sum-ii-input-array-is-sorted problem&#10;&#10;approach: an efficient way to make two pointers&#10;and loop with two pointers if target grater than &#10;sum of two pointers then move left pointer by one&#10;and vice versa till we find the result." />
    <option name="LAST_COMMIT_MESSAGE" value="Solve two-sum-ii-input-array-is-sorted problem&#10;&#10;approach: an efficient way to make two pointers&#10;and loop with two pointers if target grater than &#10;sum of two pointers then move left pointer by one&#10;and vice versa till we find the result." />
  </component>
</project>